@using komp.Models.tipai
@using komp.Models
@model komp.Models.Order
@{
    ViewBag.Title = "PURCHASE";
}

@{
    var cart = (Cart)Session["Cart"];
    var sum = cart.prekes.Sum(x => x.kaina);
}

<style>
    .products {
        background-color: white;
        color: black;
        white-space: nowrap;
        overflow-x: hidden;
        overflow-y: hidden;
        padding-left: 10px;
        padding-right: 10px;
    }

    .header {
        color: black;
        padding-left: 10px;
    }

    .hr {
        width: 100%;
        background-color: black;
        height: 5px;
        margin-right: auto;
        color: black;
    }

    .line {
        width: 50%;
        height: 100%;
        white-space: nowrap;
        overflow-x: auto;
        overflow-y: hidden;
    }

    .childline1 {
        display: inline-block;
        width: 50%;
        height: 25%;
    }

    .childline2 {
        display: inline-block;
        width: 25%;
        height: 25%;
    }

    .childline3 {
        display: inline-block;
        width: 10%;
        height: 25%;
    }

    .img {
        display: inline-block;
        width: 10%;
        height: 10%;
    }
    .col-md-10 {
        padding: 5px;
    }
</style>
<div class="products">
    <h1>Pirkimo langas</h1>
    <hr class="hr" />
    <ul class="products">
        @if (cart.prekes.Count != 0)
        {
            foreach (var item in cart.prekes)
            {
                <li style="display:block;">

                    <div class="products">
                        @if ((Session["Role"] is null))
                        {
                            <img class="img" src="~/Assets/images/Items/@item.path">
                        }
                        else if (Session["Role"].Equals(Role.User))
                        {
                            <img src="~/Assets/images/Items/@item.path">
                        }
                        else if (Session["Role"].Equals(Role.Admin))
                        {
                            if (item.matomas)
                            {
                                <img src="~/Assets/images/Items/@item.path">
                            }
                            else
                            {
                                <img style="filter: grayscale(100%)" src="~/Assets/images/Items/@item.path">
                                <div class="centered">Nematoma</div>
                            }
                        }



                        <h4 class="childline1">@item.pavadinimas</h4>
                        <p class="childline2">@item.kaina $</p>


                        <input class="childline3" type="button" value="Peržiūra &raquo;" onclick="location.href = '@Url.Action("Item", "Item", new RouteValueDictionary(new { id = item.id }))'" />
                    </div>

                </li>
            }
        }
        else
        {
            <h1>Tuščias krepšelis</h1>
        }


    </ul>
    <hr class="hr" />
    <h4>Bendra užsakymo suma: @sum $</h4>
    <hr class="hr" />
    @using (Html.BeginForm("CompleteBuy", "Cart", FormMethod.Post,
        new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()


        <div class="form-horizontal">
            @Html.LabelFor(model => model.vardas, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.vardas, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.vardas, "", new { @class = "text-danger", required = "required" })
            </div>
            @Html.LabelFor(model => model.pavarde, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.pavarde, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.pavarde, "", new { @class = "text-danger", required = "required" })
            </div>
            @Html.LabelFor(model => model.elpastas, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.elpastas, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.elpastas, "", new { @class = "text-danger", required = "required" })
            </div>
            @Html.LabelFor(model => model.telnumeris, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.telnumeris, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.telnumeris, "", new { @class = "text-danger", required = "required" })
            </div>
            @Html.LabelFor(model => model.adresas, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.adresas, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.adresas, "", new { @class = "text-danger", required = "required" })
            </div>

            @Html.LabelFor(model => model.mokejimas, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.mokejimas,
                   new SelectList(new string[] { "el.bankininkyste", "atsiemant prekę" }),
                     "Select My Type",
                     new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.mokejimas, "", new { @class = "text-danger", required = "required" })
            </div>
            @Html.LabelFor(model => model.atsiemimas, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.atsiemimas,
                   new SelectList(new string[] { "atsiimti parduotuvėje", "pristatyti į namus", "atsiimti pašte" }),
                     "Select My Type",
                     new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.atsiemimas, "", new { @class = "text-danger", required = "required" })
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Atlikta" class="btn btn-default" />
                </div>
            </div>
        </div>
    }
</div>